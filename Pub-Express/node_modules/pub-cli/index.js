#!/usr/bin/env node
const Template = require("./template");
const program = require("commander");
const path = require("path");
const fs = require("fs");
const inquirer = require("inquirer");
const chalk = require("chalk");

let name = process.argv[3];
let project = process.argv[4] || null;
program.version("0.0.1", "-v, --version").usage("[options]");

const exist = dir => {
  try {
    fs.accessSync(dir, fs.constants.F_OK | fs.constants.R_OK | fs.constants.W_OK);
    return true;
  } catch (e) {
    return false;
  }
};

const mkdirp = dir => {
  const dirname = path
    .relative(".", path.normalize(dir))
    .split(path.sep)
    .filter(p => !!p);
  dirname.forEach((d, idx) => {
    const pathBuilder = dirname.slice(0, idx + 1).join(path.sep);
    if (!exist(pathBuilder)) {
      fs.mkdirSync(pathBuilder);
    }
  });
};

const makeTemplate = (project, name) => {
  mkdirp("src/scss/import");
  const pathToHtmlFile = path.join(`src/${name}.html`);
  const pathToSassFile = path.join(`src/scss/import/_${name}.scss`);

  if (exist(pathToHtmlFile) || exist(pathToSassFile)) {
    console.error(chalk.hex("#e74c3c")("이미 해당 파일이 존재합니다"));
  } else if (!project || !exist(`src/scss/${project}.scss`)) {
    console.error(chalk.hex("#e74c3c")("프로젝트 scss파일이 존재하지 않습니다."));
  } else {
    fs.writeFileSync(pathToHtmlFile, Template.html(name, project));
    fs.writeFileSync(pathToSassFile, Template.scss);
    const original = fs.readFileSync(`src/scss/${project}.scss`);
    fs.writeFileSync(`src/scss/${project}.scss`, `${original} @import './import/${name}';`);
    console.log(chalk.bold.hex("#3498db")(`${project}.scss`, chalk.bold.hex("#7f8c8d")(`에 경로 추가완료`)));
    console.log(chalk.bold.hex("#3498db")(pathToHtmlFile), chalk.bold.hex("#7f8c8d")("생성 완료"));
    console.log(chalk.bold.hex("#3498db")(pathToSassFile), chalk.bold.hex("#7f8c8d")("생성 완료"));
  }
};

let triggered = false;
// program
//   .command("project <project> file <name> ")
//   .usage("<project> <file>")
//   .description("파일을 생성합니다.")
//   .alias("f")
//   .action(name => {
//     makeTemplate();
//     triggered = true;
//   });

// program.command("*", { noHelp: true }).action(() => {
//   console.log("해당 명령어를 찾을 수 없습니다. ");
//   program.help();
//   triggered = true;
// });

program.parse(process.argv);

if (!triggered) {
  inquirer
    .prompt([
      {
        type: "input",
        name: "project",
        message: "프로젝트 이름을 입력해주세요"
      },
      {
        type: "input",
        name: "name",
        message: "파일의 이름을 입력하세요"
      }
    ])
    .then(answers => {
      const project = answers.project;
      const name = answers.name;
      inquirer
        .prompt([
          {
            type: "confirm",
            name: "confirm",
            message: `프로젝트 : ${answers.project} 파일 : ${answers.name}\n생성하시겠습니까?`
          }
        ])
        .then(answers => {
          if (answers.confirm) {
            makeTemplate(project, name);
          }
        });
    });
}
